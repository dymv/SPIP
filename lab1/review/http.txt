Протокол HTTP. Особенности, типы запросов.

HyperText Transfer Prоtocоl 
прикладного уровня (на это уровне так же FTP и SMTP)
технология «клиент-сервер»
используется также в качестве «транспорта» для других протоколов прикладного уровня: 
	SOAP 
		(Simple Object Access Protocol)
		протокол обмена структурированными сообщениями в распределённой вычислительной среде
	XML-RPC 
		(Extensible Markup Language Remote Procedure Call)
		XML-вызов удалённых процедур
	WebDAV 
		(Web-based Distributed Authoring and Versioning)
		защищённый сетевой протокол высокого уровня, работающий поверх HTTP для доступа к объектам и коллекциям.
URI
	Uniform Resource Identifier
	Не обязательно фаил
	возможность указать в запросе и ответе способ представления одного и того же ресурса по различным параметрам: формату, кодировке, языку
		=> можно обмениваться двоичными данными, хотя данный протокол является текстовым

Преимущества
	Простота
		Протокол настолько прост в реализации, что позволяет с лёгкостью создавать клиентские приложения.
	Расширяемость
		Возможности протокола легко расширяются благодаря внедрению своих собственных заголовков, 
		с помощью которых можно получить необходимую функциональность при решении специфической задачи. 
		При этом сохраняется совместимость с другими клиентами и серверами: они будут просто игнорировать неизвестные им заголовки.
	Распространённость
		документации по протоколу на многих языках мира, 
		поддержка со стороны IDE, 
		поддержка протокола в качестве клиента многими программами
		много хостинга с HTTP.

Недостатки и проблемы
	Большой размер сообщений
		из за 
			текстового формата
		решается
			кэширования на стороне клиента
			компрессии
			diff-кодирование - передача только измененной части документа
	Отсутствие «навигации»
		решения
			site map
			в расширяющем HTTP протоколе WebDAV
				с помощью добавленного метода PROPFIND
	Нет поддержки распределённости
	
Роли ПО
	клиент
	сервер
	прокси

Структура протокола
    Стартовая строка - определяет тип сообщения
		запрос
			GET URI — для версии протокола 0.9.
    		Метод URI HTTP/Версия — для остальных версий. (GET /wiki/HTTP HTTP/1.0)
		ответ 
			HTTP/Версия КодСостояния Пояснение (HTTP/1.0 200 OK)
		методы бывают:
			OPTIONS
				OPTIONS * HTTP/1.1 - типа пинга + тест на поддержку 1.1
				Результат выполнения этого метода не кэшируется
				Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса
				В ответ серверу следует включить заголовок Allow со списком поддерживаемых методов
			GET
				Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. 
				GET /path/resource?param1=value1&param2=value2 HTTP/1.1
 				идемпотентны — многократное повторение одного и того же запроса GET должно приводить к одинаковым результатам.
				(Это позволяет кэшировать ответы на запросы GET.)
			HEAD
				Как гет, только тела нет...
				для - извлечения метаданных, проверки наличия ресурса
				Заголовки ответа могут кэшироваться. 
				При несовпадении метаданных ресурса с соответствующей информацией в кэше копия ресурса помечается как устаревшая.
			POST
				Применяется для передачи пользовательских данных заданному ресурсу. 
				В отличие от метода GET, не считается идемпотентным
				При результатах выполнения 200 (Ok) и 204 (No Content) в тело ответа следует включить сообщение об итоге выполнения запроса. 
				Если был создан ресурс, то серверу следует вернуть ответ 201 (Created) с указанием URI нового ресурса в заголовке Location.
				Сообщение ответа сервера на выполнение метода POST не кэшируется.
			PUT
				для создания новых ресурсов
				Применяется для загрузки содержимого запроса на указанный в запросе URI. 
				Если по заданному URI не существовало ресурса, то сервер создаёт его и возвращает статус 201 (Created). 
				Если же был изменён ресурс, то сервер возвращает 200 (Ok) или 204 (No Content)
				
			PATCH
				Аналогично PUT, но применяется только к фрагменту ресурса.
			DELETE
				Удаляет указанный ресурс.
			TRACE
				Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе.
			LINK
				Устанавливает связь указанного ресурса с другими.
			UNLINK
				Убирает связь указанного ресурса с другими.
			CONNECT
				Преобразует соединение запроса в прозрачный TCP/IP туннель, обычно чтобы содействовать установлению защищенного SSL соединения через не шифрованный прокси.
		Коды состояний:
			1xx Informational 
			2xx Success
			3xx Redirection
			4xx Client Error
			5xx Server Error 
					
	Заголовки HTTP — это строки в HTTP-сообщении, содержащие разделённую двоеточием пару параметр-значение
		Пример:
			Server: Apache/2.2.11 (Win32) PHP/5.3.0
			Last-Modified: Sat, 16 Jan 2010 21:16:42 GMT
			Content-Type: text/plain; charset=windows-1251
			Content-Language: ru
		Группы:
			General Headers (рус. Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
	    	Request Headers (рус. Заголовки запроса) — используются только в запросах клиента.
	    	Response Headers (рус. Заголовки ответа) — только для ответов от сервера.
	    	Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения.
	    
		
		

    Тело сообщения — непосредственно данные сообщения. Обязательно должно отделяться от заголовков пустой строкой.
		Тело HTTP сообщения (message-body), если оно присутствует, используется для передачи тела объекта, связанного с запросом или ответом. 
		Тело сообщения (message-body) отличается от тела объекта (entity-body) только в том случае, 
		когда применяется кодирование передачи, что указывается полем заголовка Transfer-Encoding.

Заголовки и тело сообщения могут отсутствовать, но стартовая строка является обязательным элементом, так как указывает на тип запроса/ответа. Исключением является версия 0.9 протокола, у которой сообщение запроса содержит только стартовую строку, а сообщения ответа только тело сообщения.
	